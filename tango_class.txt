@startuml
package user {
    interface UserDetails {
        + getAuthorities(): Collection<GrantedAuthority>
        + getPassword(): String
        + getUsername(): String
        + isAccountNonExpired(): boolean
        + isAccountNonLocked(): boolean
        + isCredentialsNonExpired(): boolean
        + isEnabled(): boolean
    }

    class User implements UserDetails{
        - Long id
        - String username                   
        - String email                      
        - String password                   
        - boolean enabled                   
        - Set<String> role
        - LocalDateTime createdAt           
        - LocalDateTime deletedAt           

        + Getter/Setter
        + getAuthorities(): Collection<GrantedAuthority>
        + isAccountNonExpired(): boolean
        + isAccountNonLocked(): boolean
        + isCredentialsNonExpired(): boolean
        + isEnabled(): boolean
    }

    class UserController {
        - UserService userService

        + login(UserLoginDTO loginDTO): ResponseEntity<LoginResponseDTO>
        + logout(): ResponseEntity<String>
        + registerUser(UserDTO userDTO): ResponseEntity<RegisterResponseDTO>
        + deleteUser(Long userId): ResponseEntity<String>
        + getUser(Long id): ResponseEntity<UserResponseDTO>
    }

    class UserLoginDTO {
        - String email
        - String password

        + Getter/Setter
    }

    class LoginResponseDTO {
        - String token
        - String message

        + Getter/Setter
    }

    class UserDTO {
        - String username
        - String email
        - String password

        + Getter/Setter
    }

    class RegisterResponseDTO {
        - Long userId
        - String message
        - String username

        + Getter/Setter
    }

    class UserResponseDTO {
        - Long userId
        - String username
        - String email

        + Getter/Setter
    }

    class UserService {
        - UserRepository userRepository

        + authenticate(UserLoginDTO loginDTO): LoginResponseDTO
        + registerUser(UserDTO userDTO): RegisterResponseDTO
        + deleteUser(Long userId): void
    }

    interface UserDetailsService {
        + loadUserByUsername(String username): UserDetails
    }

    class CustomUserDetailsService implements UserDetailsService {
        - UserRepository userRepository

        + loadUserByUsername(String username): UserDetails
    }

    class UserRepository {
        + findByUsername(String username): Optional<User>
        + findByEmail(String email): Optional<User>
        + findByUsernameOrEmail(String username, String email): Optional<User>
    }
}

package cardbook {
    class Cardbook {
        - Long id
        - Long userId
        - String name
        - String description
        - LocalDateTime createdAt
        - LocalDateTime updatedAt
        - LocalDateTime deletedAt

        + Getter/Setter
    }

    class CardbookController {
        - CardbookService cardbookService

        + getCards(Long cardbookId): List<Card>
        + findCardbooksByUserId(userId: Long): List<Cardbook>
        + getCardCount(Long cardbookId): int
        + registerCardbook(userId: Long, name: String, description: String): Cardbook
        + updateCardbookDetails(Long cardbookId, name: String, description: String): void
        + deleteCardbook(cardbookId: Long): void
    }

    class CardbookService {
        - CardbookRepository cardbookRepository

        + getCards(Long cardbookId): List<Card>
        + findCardbooksByUserId(userId: Long): List<Cardbook>
        + getCardCount(Long cardbookId): int
        + registerCardbook(userId: Long, name: String, description: String): Cardbook
        + updateCardbookDetails(Long cardbookId, name: String, description: String): void
        + deleteCardbook(cardbookId: Long): void
    }

    class CardbookRepository {
        + findById(Long cardbookId): Optional<Cardbook>
        + findByUserId(Long userId): List<Cardbook>
        + saveCardbook(Cardbook cardbook): Cardbook
        + deleteCardbook(Cardbook cardbook): void
    }

    class CardbookNotFoundException extends Exception{
    }
}

package card {
    class Card {
        - Long id
        - Long cardbookId
        - String term
        - String definition
        - int memorizationLevel
        - LocalDateTime createdAt
        - LocalDateTime updatedAt

        + updateTerm(term: String): void
        + updateDefinition(definition: String): void
        + updateMemorizationLevel(level: int): void
    }
}

package deletedCardbook {
    class DeletedCardbook {
        - Long id
        - Long cardbookId
        - LocalDateTime deletedAt
        - LocalDateTime restoreDeadline

        + restoreToCardBook(): Cardbook
        + deleteCompletely(): void
    }
}

package testHistory {
    class TestHistory {
        - Long id
        - Long userId
        - Long cardbookId
        - int correctAnswers
        - int totalQuestions
        - LocalDateTime createdAt

        + Getter/Setter
    }
}

package inquiry {
    class Inquiry {
        - Long id
        - Long userId
        - String type
        - String message
        - LocalDateTime created_at

        + Getter/Setter
    }
}

package importHistory {
    class ImportHistory {
        - Long id
        - Long cardbookId
        - Long userId
        - String fileName
        - Boolean isSuccess
        - int errorRows
        - LocalDateTime createdAt

        + Getter/Setter
    }
}


User "1" --> "0..*" Cardbook
User "1" --> "0..*" Inquiry
Cardbook "1" --> "0..*" Card
Cardbook "1" -- "1" DeletedCardbook
Cardbook "1" --> "0..*" TestHistory
Cardbook "1" --> "0..*" ImportHistory

UserController --> UserService
UserService --> UserRepository
CustomUserDetailsService --> UserRepository
UserController --> UserLoginDTO
UserController --> LoginResponseDTO
UserController --> RegisterResponseDTO
UserController --> UserResponseDTO
UserService --> UserLoginDTO
UserService --> UserDTO
UserService --> RegisterResponseDTO

CardbookController --> CardbookService
CardbookService --> CardbookRepository

@enduml