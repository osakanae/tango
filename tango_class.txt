@startuml
package user {
    interface UserDetails {
        + getAuthorities(): Collection<GrantedAuthority>
        + getPassword(): String
        + getUsername(): String
        + isAccountNonExpired(): boolean
        + isAccountNonLocked(): boolean
        + isCredentialsNonExpired(): boolean
        + isEnabled(): boolean
    }

    class User implements UserDetails{
        - Long id
        - String username
        - String emai
        - String password
        - boolean enabled
        - Set<String> role
        - LocalDateTime createdAt
        - LocalDateTime deletedAt

        + Getter/Setter
        + getAuthorities(): Collection<GrantedAuthority>
        + isAccountNonExpired(): boolean
        + isAccountNonLocked(): boolean
        + isCredentialsNonExpired(): boolean
        + isEnabled(): boolean
    }

    class UserController {
        - UserService userService

        + login(UserLoginDTO loginDTO): ResponseEntity<LoginResponseDTO>
        + logout(): ResponseEntity<String>
        + registerUser(UserDTO userDTO): ResponseEntity<RegisterResponseDTO>
        + deleteUser(Long userId): ResponseEntity<String>
        + getUser(Long id): ResponseEntity<UserResponseDTO>
    }

    class UserLoginDTO {
        - String email
        - String password

        + Getter/Setter
    }

    class LoginResponseDTO {
        - String token
        - String message

        + Getter/Setter
    }

    class UserDTO {
        - String username
        - String email
        - String password

        + Getter/Setter
    }

    class RegisterResponseDTO {
        - Long userId
        - String message
        - String username

        + Getter/Setter
    }

    class UserResponseDTO {
        - Long userId
        - String username
        - String email

        + Getter/Setter
    }

    class UserService {
        - UserRepository userRepository

        + authenticate(UserLoginDTO loginDTO): LoginResponseDTO
        + registerUser(UserDTO userDTO): RegisterResponseDTO
        + deleteUser(Long userId): void
    }

    interface UserDetailsService {
        + loadUserByUsername(String username): UserDetails
    }

    class CustomUserDetailsService implements UserDetailsService {
        - UserRepository userRepository

        + loadUserByUsername(String username): UserDetails
    }

    class UserRepository {
        + findByUsername(String username): Optional<User>
        + findByEmail(String email): Optional<User>
        + findByUsernameOrEmail(String username, String email): Optional<User>
    }
}

package cardbook {
    class Cardbook {
        - Long id
        - Long userId
        - String name
        - String description
        - LocalDateTime createdAt
        - LocalDateTime updatedAt
        - LocalDateTime deletedAt

        + Getter/Setter
    }

    class CardbookController {
        - CardbookService cardbookService

        + getCards(Long cardbookId): List<Card>
        + findCardbooksByUserId(userId: Long): List<Cardbook>
        + getCardCount(Long cardbookId): int
        + registerCardbook(userId: Long, name: String, description: String): Cardbook
        + updateCardbookDetails(Long cardbookId, name: String, description: String): void
        + deleteCardbook(cardbookId: Long): void
    }

    class CardbookService {
        - CardbookRepository cardbookRepository

        + getCards(Long cardbookId): List<Card>
        + findCardbooksByUserId(userId: Long): List<Cardbook>
        + getCardCount(Long cardbookId): int
        + registerCardbook(userId: Long, name: String, description: String): Cardbook
        + updateCardbookDetails(Long cardbookId, name: String, description: String): void
        + deleteCardbook(cardbookId: Long): void
    }

    class CardbookRepository {
        + findById(Long cardbookId): Optional<Cardbook>
        + findByUserId(Long userId): List<Cardbook>
        + saveCardbook(Cardbook cardbook): Cardbook
        + deleteCardbook(Cardbook cardbook): void
    }

    class CardbookNotFoundException extends Exception{
    }
}

package card {
    class Card {
        - Long id
        - Long cardbookId
        - String term
        - String definition
        - int memorizationLevel
        - LocalDateTime createdAt
        - LocalDateTime updatedAt

        + Getter/Setter
    }

    class CardController {
        + updateTerm(Long cardId, String newTerm): void
        + updateDefinition(Long cardId, String newDefenition): void
        + updateMemorizationLevel(Long cardId, int newLevel): void
        + searchCards(String keyword): List<Card>
    }

    class CardService {
        + updateTerm(Long cardId, String newTerm): void
        + updateDefinition(Long cardId, String newDefenition): void
        + updateMemorizationLevel(Long cardId, int newLevel): void
        + searchCards(String keyword): List<Card>
    }

    class CardRepository {
        + findById(Long cardId): Card
        + findByCardbookId(Long cardbookId): List<Card>
        + updateTerm(Long cardId, String newTerm): void
        + updateDefinition(Long cardId, String newDefenition): void
        + updateMemorizationLevel(Long cardId, int newLevel): void
        + searchCards(String keyword): List<Card>
    }

    class CardNotFoundException extends Exception{
    }
}

package deletedCardbook {
    class DeletedCardbook {
        - Long id
        - Long cardbookId
        - LocalDateTime deletedAt
        - LocalDateTime restoreDeadline

        + Getter/Setter
    }

    class DeletedCardbookController {
        + restoreToCarbook(Long DeletedCardbookId): Cardbook
        + deleteCompletely(Long DeletedCardbookId): void
        + listDeletedCardbooksByUser(Long userId): List<DeletedCardbook> // ユーザーごとの削除済みカードブックを取得
    }

    class DeletedCardbookService {
        + restoreToCardbook(Long DeletedCardbookId): Cardbook
        + deleteCompletely(Long DeletedCardbookId): void
        + findDeletedCardbooksByUser(Long userId): List<DeletedCardbook> // ユーザーごとの削除済みカードブックを取得するロジックを処理
    }

    class DeletedCardbookRepository {
        + findById(Long DeletedCardbookId): Optional<Cardbook>
        + findByUserId(Long userId): List<DeletedCardbook>
        + deleteById(Long deletedCardbookId): void // IDを指定してレコードを完全削除
    }
}

package inquiry {
    class Inquiry {
        - Long id
        - Long userId
        - String type
        - String message
        - String status  // 問い合わせの状態 ("OPEN", "IN_PROGRESS", "CLOSED" など)
        - String adminResponse // 管理者からの返信
        - LocalDateTime createdAt
        - LocalDateTime updatedAt

        + Getter/Setter
    }

    class InquiryController {
        + createInquiry(Long userId, String subject, String message): Inquiry // 新規問い合わせを作成
        + getInquiriesByUser(Long userId): List<Inquiry> // ユーザーの全問い合わせを取得
        + updateInquiryStatus(Long inquiryId, String status): void // 問い合わせの状態を更新
        + respondToInquiry(Long inquiryId, String response): void // 問い合わせに返信
    }

    class InquiryService {
        + createInquiry(Long userId, String subject, String message): Inquiry // 問い合わせを作成
        + getInquiriesByUser(Long userId): List<Inquiry> // ユーザーごとの問い合わせを取得
        + updateInquiryStatus(Long inquiryId, String status): void // 問い合わせの状態を更新
        + respondToInquiry(Long inquiryId, String response): void // 問い合わせに返信
    }

    class InquiryRepository {
        + save(Inquiry inquiry): Inquiry // 問い合わせを保存
        + findById(Long inquiryId): Optional<Inquiry> // 問い合わせをIDで取得
        + findByUserId(Long userId): List<Inquiry> // ユーザーごとの問い合わせを取得
        + update(Inquiry inquiry): void // 問い合わせを更新
    }
}

package csv {
    class CSVImport {
        - Long id // インポートの一意の識別子
        - Long cardbookId // インポートを行ったカードブックのID
        - Long userId // インポートを行ったユーザーのID
        - String fileName // アップロードされたファイル名
        - String status // インポートの状態 ("SUCCESS", "FAILED")
        - String errorMessage // エラーが発生した場合のメッセージ
        - LocalDateTime createdAt // インポートの開始時刻
        - LocalDateTime completedAt // インポートの完了時刻

        + Getter/Setter
    }

    class CSVController {
        + importCSV(MultipartFile file, Long cardbookId): CSVImport // CSVファイルをインポート
        + exportCSV(Long userId): ResponseEntity<Resource> // データをCSVとしてエクスポート
        + getImportHistory(Long userId): List<CSVImport> // インポート履歴を取得
    }

    class CSVService {
        + importCSV(MultipartFile file, Long cardbookId): CSVImport // インポート処理を実行
        + exportCSV(Long cardbookId): Resource // エクスポート処理を実行
        + getImportHistory(Long userId): List<CSVImport> // インポート履歴を取得
    }

    class CSVRepository {
        + saveImportHistory(CSVImport csvImport): CSVImport // インポート履歴を保存
        + findImportHistoryByUserId(Long userId): List<CSVImport> // ユーザーごとのインポート履歴を取得
        + findByCardbookId(Long cardbookId): List<Card> // 単語帳IDでカードを取得
    }
}


User "1" --> "0..*" Cardbook
User "1" --> "0..*" Inquiry
Cardbook "1" --> "0..*" Card
Cardbook "1" -- "1" DeletedCardbook
Cardbook "1" --> "0..*" TestHistory
Cardbook "1" --> "0..*" ImportHistory

UserController --> UserService
UserService --> UserRepository
CustomUserDetailsService --> UserRepository
UserController --> UserLoginDTO
UserController --> LoginResponseDTO
UserController --> RegisterResponseDTO
UserController --> UserResponseDTO
UserService --> UserLoginDTO
UserService --> UserDTO
UserService --> RegisterResponseDTO

CardbookController --> CardbookService
CardbookService --> CardbookRepository

@enduml