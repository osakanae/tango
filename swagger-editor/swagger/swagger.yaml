# OASのバージョン
openapi: 3.0.0
# APIの一般情報
info:
  title: Tango API
  description: Web単語帳アプリTangoのAPIドキュメントです。
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /api/auth/register:
    post:
      summary: 新規ユーザー登録
      description: Tangoアプリケーションに新しいユーザーを登録します。
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDTO"
      responses:
        "201":
          description: ユーザーが正常に登録されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponseDTO"
        "400":
          description: リクエストデータが無効です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: コンフリクト - メールアドレスが既に登録されています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: ユーザのログイン
      description: ユーザーを認証し、今後のリクエストに使用するJWTトークンを返します。
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDTO"
      responses:
        "200":
          description: ログインに成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDTO"
        "401":
          description: 認証されていません - 資格情報が無効です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/logout:
    post:
      summary: ユーザーのログアウト
      description: 現在のユーザーをログアウトし、セッションまたはトークンを無効化します。
      tags:
        - Authentication
      responses:
        "200":
          description: ログアウトに成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: 認証エラー - トークンが無効または欠落しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/{id}:
    get:
      summary: ユーザー情報の取得
      description: 指定されたIDでユーザーの情報を取得します。
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 取得するユーザーのID。
      responses:
        "200":
          description: ユーザー情報が正常に取得されました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "404":
          description: ユーザーが見つかりません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/cardbooks:
    get:
      summary: すべてのカードブックを取得
      description: ログインしているユーザーが登録したすべてのカードブックを取得します。
      tags:
        - Cardbook
      responses:
        "200":
          description: カードブック一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardbookResponse"
        "400":
          description: 認証が必要です。ログインしてください。
    post:
      summary: カードブックを新規作成
      description: 新しいカードブックを作成します。
      tags:
        - Cardbook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardbookRequest"
      responses:
        "201":
          description: カードブックが正常に作成されました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardbookResponse"
        "400":
          description: 入力データが無効です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: サーバーエラーです。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/cardbooks/{id}:
    put:
      tags:
        - Cardbook
      summary: カードブックを更新
      description: 指定したIDのカードブックを更新します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 更新するカードブックのID。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: カードブックの新しい名前。
                  example: "Updated Cardbook Name"
                description:
                  type: string
                  description: カードブックの新しい説明。
                  example: "This is the updated description for the cardbook."
              required:
                - name
      responses:
        "200":
          description: カードブックの更新に成功しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 更新されたカードブックのID。
                    example: 1
                  name:
                    type: string
                    description: 更新後のカードブックの名前。
                    example: "Updated Cardbook Name"
                  description:
                    type: string
                    description: 更新後のカードブックの説明。
                    example: "This is the updated description for the cardbook."
        "400":
          description: 無効なリクエスト。
        "404":
          description: 指定したIDのカードブックが見つかりません。
        "500":
          description: サーバーエラー。
    delete:
      tags:
        - Cardbook
      summary: カードブックを削除済みステータスに移動
      description: 指定したIDのカードブックを削除済みステータスに変更します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 削除するカードブックのID。
      responses:
        "200":
          description: カードブックを削除済みステータスに移動しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 削除されたカードブックのID。
                    example: 1
        "404":
          description: 指定されたカードブックが見つかりません。
        "500":
          description: サーバーエラー。

  /api/deleted-cardbooks/{id}:
    delete:
      tags:
        - Deleted Cardbook
      summary: 削除済みカードブックを完全に削除
      description: 削除済みカードブックをデータベースから完全に削除します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 完全に削除するカードブックのID。
      responses:
        "204":
          description: 削除済みカードブックの完全削除に成功しました。
        "404":
          description: 指定されたカードブックが見つかりません。
        "500":
          description: サーバーエラー。

  /api/deleted-cardbooks:
    get:
      tags:
        - Deleted Cardbook
      summary: 削除済みカードブックの一覧を取得
      description: ログインしているユーザーの削除済みカードブックを取得します。
      responses:
        "200":
          description: 削除済みカードブックの取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: カードブックのID。
                    name:
                      type: string
                      description: カードブックの名前。
                    deleted_date:
                      type: string
                      format: date-time
                      description: 削除日時。

  /api/cards:
    get:
      summary: すべてのカードを取得
      description: ログインしているユーザーが登録した全てのカードを取得します。
      tags:
        - Card
      responses:
        "200":
          description: カード一覧の取得に成功しました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
        "401":
          description: 認証が必要です。ログインしてください。
    post:
      summary: カードを新規作成
      description: 新しい単語カードを作成します。
      tags:
        - Card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRequest"
      responses:
        "201":
          description: カードが正常に作成されました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardResponse"
        "400":
          description: 入力データが無効です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: サーバーエラーです。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/cards/{id}:
    put:
      tags:
        - Card
      summary: カードの更新
      description: 指定したIDのカードの内容を更新します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 更新するカードのID。
      responses:
        "200":
          description: カードの更新に成功しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 更新されたカードのID。
                    example: 1
                  name:
                    type: string
                    description: 更新後のカードの名前。
                    example: "Updated Card Name"
                  description:
                    type: string
                    description: 更新後のカードの説明。
                    example: "This is the updated description for the card."
        "400":
          description: 無効なリクエスト。
        "404":
          description: 指定したIDのカードが見つかりません。
        "500":
          description: サーバーエラー。
    delete:
      tags:
        - Card
      summary: カードを削除
      description: 指定したIDのカードを削除します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 削除するカードのID。
      responses:
        "204":
          description: カードの削除に成功しました。
        "404":
          description: 指定されたカードが見つかりません。
        "500":
          description: サーバーエラー。

components:
  schemas:
    RegisterRequestDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス
        password:
          type: string
          format: password
          description: ユーザーのパスワード
      required:
        - email
        - password

    RegisterResponseDTO:
      type: object
      properties:
        userId:
          type: integer
          description: 新規作成されたユーザーのID
        message:
          type: string
          description: 登録確認メッセージ

    LoginRequestDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス
        password:
          type: string
          format: password
          description: ユーザーのパスワード
      required:
        - email
        - password

    LoginResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: 認証されたリクエストに使用する JWT トークン
        message:
          type: string
          description: ログイン成功メッセージ

    UserResponseDTO:
      type: object
      properties:
        userId:
          type: integer
          description: ユーザーの一意のID。
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス。

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: 成功または情報メッセージ。

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 問題が発生した場合のエラーメッセージ。

    CardbookRequest:
      type: object
      properties:
        name:
          type: string
          description: カードブックの名前
          example: "英単語帳"
        description:
          type: string
          description: カードブックの説明
          example: "受験用英語の単語帳"

    CardbookResponse:
      type: object
      properties:
        id:
          type: integer
          description: カードブックの一意の識別子
          example: 1
        name:
          type: string
          description: カードブックの名前
          example: "英単語帳"
        description:
          type: string
          description: カードブックの説明
          example: "受験用英語の単語帳"

    CardRequest:
      type: object
      properties:
        term:
          type: string
          description: 単語やフレーズなど
          example: "programming"
        definition:
          type: string
          description: 単語の説明または定義
          example: "The process of creating software."

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          description: カードの一意の識別子
          example: 1
        term:
          type: string
          description: 単語やフレーズなど
          example: "programming"
        definition:
          type: string
          description: 単語の説明または定義
          example: "The process of creating software."
        memorizationLevel:
          type: integer
          description: 暗記レベル（0：未暗記, 1：部分暗記, 2：暗記済）
          example: 2
